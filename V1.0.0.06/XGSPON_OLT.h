/****************************************************************************
 *
 * File:                XGSPON_OLT.h
 *
 * Author:              Eric.Yao
 *
 * Description:         XGSPON PON OLT模块基本控制代码，跟固件紧密相关
 *
 * Time:                2017-02-15
 *
 * version:				v1.1.0.0
 *
****************************************************************************/
#ifndef _XGSPON_OLT_H_
#define _XGSPON_OLT_H_ 

#include "supermaster.h"	 

//=======================================================================================
#pragma pack (1) /* set maximum alignment to 1 */    

typedef union  FloatAndByte
{
	float         dtemp;
	unsigned char u8temp[4];
		
}UNFloatAndByte;

/////////////////////////////////////////////////////////////////
/*   A0 Lower Memory                                           */
/////////////////////////////////////////////////////////////////
struct FLAG_8082DEF                        
{                                       
INT8U  Tx_P_Low    :1;
INT8U  Tx_P_Hgh    :1;
INT8U  Tx_Bias_Low :1;
INT8U  Tx_Bias_Hgh :1;
INT8U  vcc_Low     :1;
INT8U  vcc_Hgh     :1;
INT8U  Temp_Low    :1;
INT8U  Temp_Hgh    :1;
};

struct FLAG_8183DEF                          
{                                       
INT8U  Reserved1   :1; 	    
INT8U  Reserved2   :1;   
INT8U  AUX2_Low    :1; 
INT8U  AUX2_High   :1; 
INT8U  AUX1_Low    :1;
INT8U  AUX1_High   :1;
INT8U  Rx_P_Low    :1;
INT8U  Rx_P_Hgh    :1;  
};                         
                                   
struct FLAG_84DEF 
{       
INT8U      Reset_Complete  :1; 
INT8U      Mirror_MOD_NR   :1;
INT8U      RX_CDR          :1;
INT8U      RX_LOS          :1;
INT8U      RX_NR           :1;
INT8U      TX_CDR          :1;
INT8U      TX_Fault        :1; 
INT8U      TX_NR           :1;
};
  
struct FLAG_85DEF 
{       
INT8U      Reserved1           :1;	
INT8U      Reserved2           :1;
INT8U      Reserved3           :1;
INT8U      Reserved4           :1;  
INT8U      Reserved5           :1;
INT8U      Wavelength_Unlocked :1;   
INT8U      TEC_Fault           :1; 
INT8U      APD_Supply_Fault    :1;  
};
					
struct FLAG_8687DEF
{                             
INT8U      Vee5_Low     :1; 
INT8U      Vee5_High    :1;
INT8U      VCC2_Low     :1;
INT8U      VCC2_High    :1;
INT8U      VCC3_Low     :1;	
INT8U      VCC3_High    :1;	
INT8U      VCC5_Low     :1;
INT8U      VCC5_High    :1;	 
};

struct FLAG_110DEF     
{                             
INT8U      Data_Not_Ready :1; //Indicates transceiver has achieved power up and A/D data is ready 
INT8U      LOS            :1; //Indicates Optical Loss of Signal
INT8U      Interrupt      :1; //Digital state of the Interrupt output pin
INT8U      Soft_P_Down    :1; //Optional read/write bit that allows the module to be placed in the power down mode
INT8U      P_Down         :1; //Digital state of the P_Down Pin
INT8U      MOD_NR         :1; //Digital state of the MOD_NR Pin
INT8U      Soft_Tx_Dis    :1; //Optional read/write bit that allows software disable of laser.
INT8U      Tx_Dis         :1; //Digital state of the TX Disable Input Pin 
};

struct FLAG_111DEF                         
{                                        
INT8U      APD_Protected  :1; //jack add 
INT8U      Reserved2      :1;
INT8U      Reserved3      :1;
INT8U      RX_CDR_LOL     :1; //Locked Identifies Loss of Lock in RX path CDR
INT8U      RX_NR          :1; //Identifies Not Ready condition as specific to the TX path
INT8U      TX_CDR_LOL     :1; //Locked Identifies Loss of Lock in TX path CDR  
INT8U      TX_Fault       :1; //Identifies Laser fault condition (Generated by laser safety system)
INT8U      TX_NR          :1; //Identifies Not Ready condition as specific to the TX path 
};                            
                                         
struct XFPstrA0 		  
{
	INT8U  reserved_table[128];		//pStrA0[128~255] 									   
	INT8U  LUTIndex;				//pStrA0[127]   
	INT32U Password;			    //pStrA0[123~126]   
	INT8U  mode;                    //pStrA2[122]，是F2[0]映射到A2[122]的值，只读，即使改写了重上电后恢复原值
	INT8U  version;                 //pStrA2[121]，是大版本号映射到A2[121]的值，只读，即使改写了重上电后恢复原值
	INT8U  INT_i;                   //pStrA2[120]，进RSSI/BEN中断的次数
	INT8U  BAK_i;                   //pStrA2[119]，主循环自动模式下的循环次数      																																	
	INT8U  Packet_Error_Checking;	//pStrA0[118] 
	INT8U  reserved_status[6];		//pStrA0[112~117] 

    struct FLAG_111DEF status_111;	//pStrA0[111] 
    struct FLAG_110DEF status_110;	//pStrA0[110] 
	INT16U AUX2;					//pStrA0[108~109], 1.8V 
	INT16U AUX1;					//pStrA0[106~107], MC_MON
	INT16U rx_Power;				//pStrA0[104~105]
	INT16U tx_Power;				//pStrA0[102~103]
	INT16U tx_Bias;					//pStrA0[100~101]					         
	INT16U vcc;						//pStrA0[98~99], reserved
	INT16S temperature;				//pStrA0[96~97]

	struct FLAG_8687DEF MASK87;			//pStrA0[95]  
	struct FLAG_8687DEF MASK86;			//pStrA0[94]  
	struct FLAG_85DEF   MASK85;			//pStrA0[93]  
	struct FLAG_84DEF   MASK84;			//pStrA0[92]  
	struct FLAG_8183DEF MASK83;			//pStrA0[91]  
	struct FLAG_8082DEF MASK82;			//pStrA0[90]  
	struct FLAG_8183DEF MASK81;			//pStrA0[89]  
	struct FLAG_8082DEF MASK80;			//pStrA0[88]  
	
	struct FLAG_8687DEF Power_Warning;	//pStrA0[87]  
	struct FLAG_8687DEF Power_Alarm;	//pStrA0[86]  
	struct FLAG_85DEF   WL_TEC_APD_Flg; //pStrA0[85]  
	struct FLAG_84DEF   TRx_Flg;		//pStrA0[84]  
	struct FLAG_8183DEF FLAG_WARN_83;	//pStrA0[83]  
	struct FLAG_8082DEF FLAG_WARN_82;   //pStrA0[82]  
	struct FLAG_8183DEF FLAG_ALARM_81;	//pStrA0[81]  
	struct FLAG_8082DEF FLAG_ALARM_80;	//pStrA0[80]  
	
	INT8U  reserved2[2];				//pStrA0[78~79]  
	INT8U  PhaseAdjustment;				//pStrA0[77]//Not Support 
	INT8U  Amplitude_Adjustment;		//pStrA0[76]//Not Support 
	INT16U Wavelength_Error;			//pStrA0[74~75]//Not Support 
	INT16U Wavelength_SeSet;			//pStrA0[72~73]//Not Support 
	INT16U Actual_BER;					//pStrA0[70~71]//Not Support 
	INT8U  reserved1[10];  			    //pStrA0[60~69]
	INT16U  Optional_VPS_Control;		//pStrA0[58~59]//Not Support  																							
	INT16U  AUX2LowWarning;				//pStrA0[56~57]//AUX2  1.8V Low Warning  
	INT16U  AUX2HighWarning;			//pStrA0[54~55]//AUX2  1.8V High Warning 
	INT16U  AUX2LowAlarm;				//pStrA0[52~53]//AUX2  1.8V Low Alarm 
	INT16U  AUX2HighAlarm;				//pStrA0[50~51]//AUX2  1.8V High Alarm 
	INT16U  AUX1LowWarning;				//pStrA0[48~49]//AUX1 VTEMP Low Warning   																									
	INT16U  AUX1HighWarning;			//pStrA0[46~47]//AUX1 VTEMP High Warning   																									
	INT16U  AUX1LowAlarm;				//pStrA0[44~45]//AUX1 VTEMP Low Alarm 				
	INT16U  AUX1HighAlarm;				//pStrA0[42~43]//AUX1 VTEMP High Alarm  							
	INT16U  rxPowerLowWarning;			//pStrA0[40~41]//Reserved         																														
	INT16U  rxPowerHighWarning;			//pStrA0[38~39]//RX Power High Warning  																												
	INT16U  rxPowerLowAlarm;			//pStrA0[36~37]//RX Power Low Alarm  																											
	INT16U  rxPowerHighAlarm;			//pStrA0[34~35]//RX Power High Alarm 																											
	INT16U  txPowerLowWarning;			//pStrA0[32~33]//TX Power Low Warning   																									
	INT16U  txPowerHighWarning;			//pStrA0[30~31]//TX Power High Warning   																												
	INT16U  txPowerLowAlarm;			//pStrA0[28~29]//TX Power Low Alarm     																													
	INT16U  txPowerHighAlarm;			//pStrA0[26~27]//TX Power High Alarm   																														
	INT16U  biasLowWarning;				//pStrA0[24~25]//Bias Low Warning     																									
	INT16U  biasHighWarning;			//pStrA0[22~23]//Bias High Warning   																													
	INT16U  biasLowAlarm;				//pStrA0[20~21]//Bias Low Alarm        																										
	INT16U  biasHighAlarm;				//pStrA0[18~19]//Bias High Alarm       																										
	INT16U	voltageLowWarning;	        //pStrA2[16~17]//Voltage Low Warning   																									
	INT16U	voltageHighWarning;	        //pStrA2[14~15]//Voltage High Warning   																									
	INT16U	voltageLowAlarm;	        //pStrA2[12~13]//Voltage Low Alarm 				
	INT16U	voltageHighAlarm;	        //pStrA2[10~11]//Voltage High Alarm  							
	INT16S tempLowWarning;				//pStrA0[8~9]  //Temperature Low Warning  																											
	INT16S tempHighWarning;				//pStrA0[6~7]  //Temperature High Warning  																																																				
	INT16S tempLowAlarm;				//pStrA0[4~5]  //Temperature Low Alarm  																																																			
	INT16S tempHighAlarm;				//pStrA0[2~3]  //Temperature High Alarm 																													 
	INT8U  Signal_Conditioner_Control;	//pStrA0[1]    //Nominal bit rate, units of 100 MBits/sec                                                
	INT8U  Identifier;					//pStrA0[0]     
}; 

union XFPuA0
{ 
  struct XFPstrA0 sStr;
  INT8U  pStr[256];
};

/*====================================================================================*/
// EEPROM A0 Table01h
/*====================================================================================*/ 
struct ExtIdentifyDef
{
INT8U bit0_2:3;			 //Reserved                  
INT8U bit3:1;            //have CLEI code or not 0: no CLEI code  1:CLEI code in table02
INT8U bit4:1;			 //TX Ref Clock Input required or not  0:required  1:not required
INT8U bit5:1;			 //CDR function or not 0: Module with CDR function  1:Non-CDR of XFP 
INT8U bit6_7:2;			 //Power Level module
};

struct ETHERNETCDef			 
{
INT8U bit0:1;			 //Reserved                      
INT8U bit1:1;			 //10GBASE-EW
INT8U bit2:1;		     //10GBASE-LW
INT8U bit3:1;			 //10GBASE-SW
INT8U bit4:1;			 //10GBASE-LRW
INT8U bit5:1;			 //10GBASE-ER  
INT8U bit6:1;			 //10GBASE-LR   
INT8U bit7:1;			 //10GBASE-SR 
};

struct LowerSpeedLDef
{
INT8U bit0:1;			 //Reserved                  
INT8U bit1:1;			 //OC-48-LR
INT8U bit2:1;		     //OC-48-IR
INT8U bit3:1;			 //OC-48-SR
INT8U bit4:1;            //2xFC SMF
INT8U bit5:1;			 //2xFC MMF
INT8U bit6:1;			 //1000BASE-LX/1xFC SMF
INT8U bit7:1;			 //1000BASE-SX/1xFC MMF
};

struct SONETCInterCDef
{
INT8U bit0_1:2;			 //Reserved                        
INT8U bit2:1;		     //I-64.5
INT8U bit3:1;			 //I-64.3
INT8U bit4:1;			 //I-64.2
INT8U bit5:1;			 //I-64.2r
INT8U bit6:1;			 //I-64.1
INT8U bit7:1;			 //I-64.1r
};

struct SONETCShortHDef
{
INT8U bit0:1;			 //Reserved                     
INT8U bit1:1;			 //S-64.5b
INT8U bit2:1;		     //S-64.5a
INT8U bit3:1;			 //S-64.3b
INT8U bit4:1;            //S-64.3a
INT8U bit5:1;			 //S-64.2b
INT8U bit6:1;			 //S-64.2a
INT8U bit7:1;			 //S-64.1
};

struct SONETCLongHDef
{
INT8U bit0_1:2;			 //Reserved   
INT8U bit2:1; 			 //G.959.1 P1L1-2D2
INT8U bit3:1;		     //L-64.3
INT8U bit4:1;            //L-64.2c
INT8U bit5:1;			 //L-64.2b
INT8U bit6:1;			 //L-64.2a
INT8U bit7:1;			 //L-64.1
};

struct SONETCVLongHDef
{
INT8U bit0_4:5;			 //Reserved
INT8U bit5:1;			 //V-64.3
INT8U bit6:1;			 //V-64.2b
INT8U bit7:1;			 //V-64.2a
};

struct ENCODING
{
INT8U bit0_2:3;			 //Reserved
INT8U bit3:1;		     //RZ
INT8U bit4:1;            //NRZ
INT8U bit5:1;			 //SONET Scrambled
INT8U bit6:1;			 //8B10B
INT8U bit7:1;			 //64B/66B
};

struct DeviceTDef
{
INT8U bit0:1;			 //Transmitter Tunable or not 
INT8U bit1:1;			 //Detector Type 0:PIN 1:APD
INT8U bit2:1; 			 //Cooled transmitter or not
INT8U bit3:1;		     //wavelength control or not
INT8U bit4_7:4;          //Transmitter technology
};

struct CDRSupportDef
{
INT8U bit0:1;			 //XFI Loopback Mode Supported                    
INT8U bit1:1;			 //Lineside Loopback Mode Supported
INT8U bit2:1;		     //Reserved
INT8U bit3:1;			 //CDR support for 11.1 Gb/s
INT8U bit4:1;            //CDR support for 10.7 Gb/s
INT8U bit5:1;			 //CDR support for 10.5 Gb/s
INT8U bit6:1;			 //CDR support for 10.3 Gb/s
INT8U bit7:1;			 //CDR support for 9.95 Gb/s
};

struct Iccmax1Def
{
INT8U bit0_3:4;			 //Maximum current required by +3.3V Supply
INT8U bit4_7:4;			 //Maximum current required by +5V Supply 
};

struct Iccmax2Def
{
INT8U bit0_3:4;			 //Maximum current required by -5.2V Supply
INT8U bit4_7:4;			 //Maximum current required by +1.8V Supply 
};

struct EnhancedOptionDef
{
INT8U bit0:1;			 //Optional CMU Support Mode
INT8U bit1:1;			 //Wavelength tunability implemented
INT8U bit2:1; 			 //Active FEC control functions implemented
INT8U bit3:1;		     //Supports VPS bypassed regulator Mode
INT8U bit4:1;            //Supports VPS LV regulator mode
INT8U bit5:1;			 //Optional Soft P_down implemented
INT8U bit6:1;			 //Optional Soft TX_DISABLE implemented
INT8U bit7:1;			 //Module Supports Optional VPS
};

struct AuxMonitorDef
{
INT8U bit0_3:4;			 //Aux A/D Input 2
INT8U bit4_7:4;          //Aux A/D Input 1
};

struct strXFPA0Table1 		  
{
  //Reserved for SFF8079
  INT8U  reserved_array[128];            //pStrA0[0~127] 
  INT8U  identifier;	                 //pStrA0[128]
  struct ExtIdentifyDef  extIdentifier;	                 //pStrA0[129]
      //Code for connector type
  INT8U  connector;		                 //pStrA0[130]
      //Code for electronic compatibility or optical compatibility
  //INT8U  transceiver[8];		         //pStrA0[131~138]
  //Infiniband Compliance Codes
  struct ETHERNETCDef ethernetC;
  //Part of SONET Compliance Codes
  struct FibreChannelDef fibreChannel;
  //Part of SONET Compliance Codes
  INT8U  copperLink;	
  //Gigabit Ethernet Compliance Codes
  struct LowerSpeedLDef lowerSpeed;
  //Fiber Channel link length & part of transmitter technology
  struct SONETCInterCDef sonetInterconnect;
  //Part of Fiber Channel transmitter technology
  struct SONETCShortHDef sonetShortH;
  //Fiber Channel Transmission media
  struct SONETCLongHDef sonetLongH;
  //Fiber Channel speed
  struct SONETCVLongHDef sonetVLongH;
  
      //Code for serial encoding algorithm
  struct ENCODING  encoding;		                 //pStrA0[139]
      //Minimum bit rate, units of 100 MBits/s.
  INT8U  BR_min;	             //pStrA0[140] 	
      //Maximum bit rate, units of 100 MBits/s.
  INT8U  BR_max;		         //pStrA0[141]
      //Link length supported for SMF fiber in km
  INT8U  lengthSMF_km;		             //pStrA0[142]
      //Link length supported for EBW 50/125 μm fiber, units of 2 m
  INT8U  lengthE50m;		             //pStrA0[143]
      //Link length supported for 50/125 μm fiber, units of 1 m
  INT8U  length50im;		             //pStrA0[144]
      //Link length supported for 62.5/125 μm fiber, units of 1 m
  INT8U  length62p5im;	                 //pStrA0[145]
      //Link length supported for copper, units of 1m
  INT8U  lengthCopper;	                 //pStrA0[146]
      //Device technology
  struct DeviceTDef	 deviceTech;		  //pStrA0[147]
      //Vendor name
  INT8U  vendorName[16];		             //pStrA0[148~163]
      //Reserved
  struct CDRSupportDef  CDRsupport;		     //pStrA0[164]
      //Vendor IEEE company ID
  INT8U  vendorOUI[3];		             //pStrA0[165~167]
      //Part number provided by vendor
  INT8U  vendorPN[16];		             //pStrA0[168~183]
      //Revision level for part number provided by vendor
  INT8U  vendorRev[2];		             //pStrA0[184~185]
      //Laser wavelength
  INT16U waveLength;         			 //pStrA0[186~187]
      //wavelength Tolerance
  INT16U  wavelengthTol;                //pStrA0[188-189]
   //Maximum Case Temperature in Degrees C
  INT8U  maxCaseTemp;                      //pStrA0[190]
      //Check code for Base ID Fields
  INT8U  cc_Base;		                 //pStrA0[191]
  
//EXTENDED ID FIELDS
  //Power supply current requirements and max power dissipation
  INT8U  maxpDissipation;                    //pStrA0[192]
  INT8U  maxpDissipation_pd;                    //pStrA0[193]
  struct Iccmax1Def Iccmax1;		//pStrA0[194]
  struct Iccmax2Def Iccmax2;		//pStrA0[195]

      //Serial number provided by vendor
  INT8U vendorSN[16];                    //pStrA0[196~211]	
      //Vendor’s manufacturing date code
  INT8U dateCode[8];                     //pStrA0[212~219]
      //Indicates which type of diagnostic monitoring is implemented in the transceiver
  struct DiagnosticMonitorDef diagMonitorType;		 //pStrA0[220]
      //Indicates which optional enhanced features are implemented in the transceiver
  struct EnhancedOptionDef  enhancedOptions; 		 //pStrA0[221]
      //Indicates which revision of SFF-8472 the transceiver complies with
  struct AuxMonitorDef auxMonitor;             		 //pStrA0[222]
      //Check code for the Extended ID Fields		
  INT8U cc_Ext;                          //pStrA0[223]
  
      //VENDOR SPECIFIC ID FIELDS
  INT8U vendorSpecReserved[32];          //pStrA0[224~255]
 
};		

union XFPuA0Table1
{ 
  struct strXFPA0Table1 sStr;
  INT8U  				pStr[256];
};

struct strXFPA2Table1 		  
{
INT8U  	reserved_array[128];           //pStrA0[0~127]
INT8U  	identifier;	                	//pStrA0[128]
INT8U  	extIdentifier;	                //pStrA0[1]
INT8U  	connector;		                //pStrA0[2]
struct 	InfCompCodesDef infCompCodes;
struct 	ESCON_SONETCCDef escon_SonetCC;
struct 	SONETCCDef sonetCC;
struct 	ETHERNETCCDef ethernetCC;
struct 	FibreChannelDef fibreChannel;
struct 	TransTecDef transTec;
struct 	TransMediaDef transMedia;
struct 	FibreChannelSpeedDef fibreChannelSpeed;
INT8U  	encoding;		                //pStr[11]
INT8U  	nominalBitRate;	            	//pStr[12] 	
INT8U  	reserved141;		        	//pStr[141]
INT8U  	length9im_km;		            //pStr[14]
INT8U  	length9im;		             	//pStr[15]
INT8U  	length50im;		            	//pStr[16]
INT8U  	length62p5im;	                //pStr[17]
INT8U  	lengthCopper;	                //pStr[18]
INT8U	reserved147;		           	//pStr[147]
INT8U  	vendorName[16];		   			//pStr[20~35]
INT8U  	reserved3;		                //pStr[36]
INT8U  	vendorOUI[3];		            //pStr[37~39]
INT8U  	vendorPN[16];		            //pStr[40~55]
INT8U  	vendorRev[4];		            //pStr[56~59]
INT8U 	laserWaveLength[2];             //pStr[60~61]
INT8U  	reserved4;                     	//pStr[62]
INT8U  	cc_Base;		                //pStr[63]
struct 	Options64Def options64;			//pStr[64]
struct 	Options65Def options65;			//pStr[65]
INT8U  	maxBiteRate;                   	//pStr[66]
INT8U  	minBiteRate;                   	//pStr[67]
INT8U 	vendorSN[16];                   //pStr[68~83]	
INT8U 	dateCode[8];                    //pStr[84~91]
struct 	DiagnosticMonitorDef diagMonitorType; 	//pStr[92]
struct 	EnhancedOptionsDef  enhancedOptions; 	//pStr[93]
INT8U 	sff_8472Compliance;             //pStr[94]
INT8U 	cc_Ext;                         //pStr[223]
INT8U 	vendorSpecReserved[32];         //pStr[224~255]    
};		

union XFPuA2Table1
{ 
struct strXFPA2Table1	sStr;
INT8U  					pStr[256];
};

//union XFPuA0 		XFP_A0_Lower;
//union XFPuA0Table1	XFP_A0_Table1;
//INT8U  				XFP_A0_Tablex[256];

union uA2 XFP_A2_Lower;
union XFPuA2Table1	XFP_A2_Table1;

#pragma pack () /* set maximum alignment to default */  

#define XGSPON_OLT_CORE_TEMP_LUT_OFFSET 	50.0	  //内核温度计算查找表时的偏移量
#define XGSPON_OLT_LUT_BYTE_COUNT			6		  //每段查找表使用字节数

//XGPON APC
#define XGSPON_OLT_10G_APC_MODE_ADD		0x30	  //XGSPON OLT XGPON APC模式设置地址
#define XGSPON_OLT_10G_APC_DAC_ADD		0x32	  //XGSPON OLT XGPON APC DAC设置地址
#define XGSPON_OLT_10G_APC_RANGE_ADD	0x34	  //XGSPON OLT XGPON APC DAC设置地址 
#define XGSPON_OLT_10G_APC_LUT_NAME		"LUK"	  //XGSPON OLT XGPON APC查找表名称  
#define XGSPON_OLT_10G_APC_LUT_INDEX    2		  //XGSPON OLT XGPON APC查找表索引
#define XGSPON_OLT_10G_APC_SLOPE_AMP    1024.0    //XGSPON OLT XGPON APC查找表放大系数     

//XGPON MOD
#define XGSPON_OLT_10G_MOD_MODE_ADD		0x38	  //XGSPON OLT XGPON MOD模式设置地址
#define XGSPON_OLT_10G_MOD_DAC_ADD		0x3A	  //XGSPON OLT XGPON MOD DAC设置地址
#define XGSPON_OLT_10G_MOD_RANGE_ADD	0x3C	  //XGSPON OLT XGPON MOD DAC设置地址
#define XGSPON_OLT_10G_MOD_LUT_NAME		"LUK"	  //XGSPON OLT XGPON MOD查找表名称  
#define XGSPON_OLT_10G_MOD_LUT_INDEX    5		  //XGSPON OLT XGPON MOD查找表索引
#define XGSPON_OLT_10G_MOD_SLOPE_AMP    1024.0    //XGSPON OLT XGPON MOD查找表放大系数  

//XGPON APD
#define XGSPON_OLT_10G_APD_MODE_ADD		0x68	  //XGSPON OLT XGPON APD模式设置地址
#define XGSPON_OLT_10G_APD_DAC_ADD		0x6A	  //XGSPON OLT XGPON APD DAC设置地址
#define XGSPON_OLT_10G_APD_RANGE_ADD	0x6C	  //XGSPON OLT XGPON APD DAC设置地址
#define XGSPON_OLT_10G_APD_LUT_NAME		"LUK"	  //XGSPON OLT XGPON APD查找表名称  
#define XGSPON_OLT_10G_APD_LUT_INDEX    0		  //XGSPON OLT XGPON APD查找表索引
#define XGSPON_OLT_10G_APD_SLOPE_AMP    30.0      //XGSPON OLT XGPON APD查找表放大系数

//XGPON LOS固件暂未设计查找表
#define XGSPON_OLT_10G_LOS_MODE_ADD		0x58	  //XGSPON OLT XGPON LOS模式设置地址
#define XGSPON_OLT_10G_LOS_DAC_ADD		0x5A	  //XGSPON OLT XGPON LOS DAC设置地址
#define XGSPON_OLT_10G_LOS_RANGE_ADD	0x5C	  //XGSPON OLT XGPON LOS DAC设置地址
#define XGSPON_OLT_10G_LOS_LUT_NAME	    "LUK"	  //XGSPON OLT XGPON LOS查找表名称  
#define XGSPON_OLT_10G_LOS_LUT_INDEX    1		  //XGSPON OLT XGPON LOS查找表索引
#define XGSPON_OLT_10G_LOS_SLOPE_AMP    1024.0    //XGSPON OLT XGPON LOS查找表放大系数

//XGPON RSSI
#define XGSPON_OLT_10G_RSSI_TEMP_ADD	0x8A	  //XGSPON OLT XGPON RSSI温度补偿系数温度分界点地址
#define XGSPON_OLT_10G_RSSI_K_AMP		2048	  //XGSPON OLT XGPON RSSI温度补偿系数放大倍数
#define XGSPON_OLT_10G_RSSI_KL_ADD		0x8C	  //XGSPON OLT XGPON RSSI温度补偿系数低温系数地址
#define XGSPON_OLT_10G_RSSI_KH_ADD		0x8E	  //XGSPON OLT XGPON RSSI温度补偿系数高温系数地址
#define XGSPON_OLT_10G_RSSI_MODE_ADD	0x1C	  //XGSPON OLT XGPON RSSI模式设置地址  
#define XGSPON_OLT_10G_RSSI_LUT_NAME	"BASE"	  //XGSPON OLT XGPON RSSI查找表名称  
#define XGSPON_OLT_10G_RSSI_LUT_INDEX   1		  //XGSPON OLT XGPON RSSI查找表索引
#define XGSPON_OLT_10G_RSSI_SLOPE_AMP   2048.0 	  //XGSPON OLT XGPON RSSI查找表放大系数

//XGPON TXMON  发端监控上下限待固件给出地址定义
#define XGSPON_OLT_10G_TXMON_MODE_ADD	0x16	//XGSPON OLT XGPON 发端监控模式设置地址
#define XGSPON_OLT_10G_TXMON_SLOPE_ADD	0x18	//XGSPON OLT XGPON 发端监控系数地址
#define XGSPON_OLT_10G_TXMON_OFFSET_ADD	0x1A	//XGSPON OLT XGPON 发端监控偏移量地址
#define XGSPON_OLT_10G_TXMON_MIN_ADD	0x91	//XGSPON OLT XGPON 发端监控最小值地址 
#define XGSPON_OLT_10G_TXMON_MAX_ADD	0x92	//XGSPON OLT XGPON 发端监控最大值地址
#define XGSPON_OLT_10G_TXMON_SLOPE_AMP  16.0    //XGSPON OLT XGPON 发端监控放大系数   

/////////////////////////////////////////////////////////////////////////////////////////////////
//TEC
#define XGSPON_OLT_TEC_LUT_NAME		"LUK"	  //XGSPON OLT XGPON TEC查找表名称  
#define XGSPON_OLT_TEC_LUT_INDEX     4		  //XGSPON OLT XGPON TEC查找表索引
#define XGSPON_OLT_TEC_SLOPE_AMP     1024.0   //XGSPON OLT XGPON TEC查找表放大系数


enum LUT_MODE
{  
	LUT_MODE_MANUAL,
	LUT_MODE_AUTO,
	LUT_MODE_TABLE,
	LUT_MODE_EXT,
	LUT_MODE_FORMULA
};

enum SD_FUN
{  
	SD_FUN_OFF,
	SD_FUN_ON
};
 
//=======================================================================================  

int XGSPON_OLT_ENTRY_Password (int handle);                  //工厂密码0xD3, 0x4F, 0x45, 0x42 
int XGSPON_OLT_GET_FirmVersion(int handle, char *str);

//--------------------------Control--------------------------------------------------------------------------------------------- 

int XGSPON_OLT_Set_10G_TX_ON(int handle);                   //打开10G 发端 
int XGSPON_OLT_Set_10G_TX_OFF(int handle);                  //关闭10G 发端  
int XGSPON_OLT_Set_1G_TX_ON(int handle);                    //打开1G 发端 
int XGSPON_OLT_Set_1G_TX_OFF(int handle);                   //关闭1G 发端 

/**************************************************XGPON OLT**************************************************/
/***************************************XGPON APC************************************/
int XGSPON_OLT_SET_10G_APC_Mode (int handle, enum LUT_MODE Mode);  										//设置XGPON APC模式
int XGSPON_OLT_GET_10G_APC(int handle, unsigned short* GET_APC);   										//读取XGPON APC值    
int XGSPON_OLT_SET_10G_APC(int handle, unsigned short SET_APC);    										//设置XGPON APC值 
int XGSPON_OLT_SET_10G_APC_Range(int handle, unsigned short SET_APC_MAX, unsigned short SET_APC_MIN); 	//设置XGPON APC最大最小值	 
int XGSPON_OLT_GET_10G_APC_LUT(int handle, int *Temper, float *Slope, float *Offset);  					//读取XGPON APC LUK 
int XGSPON_OLT_SET_10G_APC_LUT(int handle, float *DAC, float *Temper);                            			//写XGPON APC查找表  
int XGSPON_OLT_SET_10G_APC_LUT_High(int handle, float *DAC, float *Temper);                      			//写XGPON APC查找表High 
int XGSPON_OLT_SET_10G_APC_LUT_Low(int handle, float *DAC, float *Temper);									//写XGPON APC查找表LOW   

int XGSPON_OLT_10G_Fault_OFF(int handle);																	//设置XGPON APC Fault功能关闭 
int XGSPON_OLT_10G_Fault_ON(int handle);																	//设置XGPON APC Fault功能开启 
/***************************************XGPON APC************************************/

/***************************************XGPON MOD************************************/
int XGSPON_OLT_SET_10G_MOD_Mode (int handle, enum LUT_MODE Mode);	  								//设置XGPON MOD查找表模式
int XGSPON_OLT_GET_10G_MOD(int handle, unsigned short* GET_MOD);     								//读取XGPON MOD值 
int XGSPON_OLT_SET_10G_MOD(int handle, unsigned short SET_MOD);      								//设置XGPON MOD值 
int XGSPON_OLT_SET_10G_MOD_Range(int handle, unsigned short MOD_MAX, unsigned short MOD_MIN); 		//设置XGPON MOD最大最小值
int XGSPON_OLT_GET_10G_MOD_LUT(int handle, int *Temper, float *Slope, float *Offset);   			//读取XGPON MOD LUK  
int XGSPON_OLT_SET_10G_MOD_LUT(int handle, float *DAC, float *Temper);                             //写XGPON MOD查找表 
int XGSPON_OLT_SET_10G_MOD_LUT_High(int handle, float *DAC, float *Temper);                        //写XGPON MOD查找表High  
int XGSPON_OLT_SET_10G_MOD_LUT_Low(int handle, float *DAC, float *Temper);                         //写XGPON MOD查找表LOW   
/***************************************XGPON MOD************************************/

/***************************************XGPON APD************************************/
int XGSPON_OLT_SET_10G_APD_Mode (int handle, enum LUT_MODE Mode);  									//设置XGPON APD模式
int XGSPON_OLT_GET_10G_APD(int handle, unsigned short* GET_APD);   									//读取XGPON APD值    
int XGSPON_OLT_SET_10G_APD(int handle, unsigned short SET_APD);    									//设置XGPON APD值 
int XGSPON_OLT_SET_10G_APD_Range(int handle, unsigned short SET_APD_MAX, unsigned short SET_APD_MIN);	//设置XGPON APD最大最小值	 
int XGSPON_OLT_GET_10G_APD_LUT(int handle, int *Temper, float *Slope, float *Offset);  				//读取XGPON APD LUK 
int XGSPON_OLT_SET_10G_APD_LUT(int handle, float* DAC, float* Temper);                            		//写XGPON APD查找表  
int XGSPON_OLT_SET_10G_APD_LUT_High(int handle, float *DAC, float *Temper);                       		//写XGPON APD查找表High 
int XGSPON_OLT_SET_10G_APD_LUT_Low(int handle, float *DAC, float *Temper);								//写XGPON APD查找表LOW   
/***************************************XGPON APD************************************/
 
/***************************************XGPON LOS************************************/
int XGSPON_OLT_SET_10G_LOS_Mode (int handle, enum LUT_MODE Mode);  									//设置XGPON LOS模式
int XGSPON_OLT_GET_10G_LOS(int handle, unsigned short* GET_LOS);   									//读取XGPON LOS值    
int XGSPON_OLT_SET_10G_LOS(int handle, unsigned short SET_LOS);    									//设置XGPON LOS值 
int XGSPON_OLT_SET_10G_LOS_Range(int handle, unsigned short SET_LOS_MAX, unsigned short SET_LOS_MIN); 	//设置XGPON LOS最大最小值	 
int XGSPON_OLT_GET_10G_LOS_LUT(int handle, int *Temper, float *Slope, float *Offset);  				//读取XGPON LOS LUK 
int XGSPON_OLT_SET_10G_LOS_LUT(int handle, float* DAC, float* Temper);                            		//写XGPON LOS查找表  
int XGSPON_OLT_SET_10G_LOS_LUT_High(int handle, float *DAC, float *Temper);                       		//写XGPON LOS查找表High 
int XGSPON_OLT_SET_10G_LOS_LUT_Low(int handle, float *DAC, float *Temper);								//写XGPON LOS查找表LOW   
/***************************************XGPON LOS************************************/

/***************************************XGPON RSSI************************************/
int XGSPON_OLT_SET_10G_RSSI_Compensation(int handle, float Kh, float Kl); 								//写XGPON Rx的高低温校准参数Kh和Kl
int XGSPON_OLT_SET_10G_RXKL(int handle, float Kl);														//写XGPON Rx的低温校准参数和Kl
int XGSPON_OLT_SET_10G_RXKH(int handle, float Kh);														//写XGPON Rx的高温校准参数和Kh
int XGSPON_OLT_GET_10G_RX_ADC(int handle, short *ADC);				    								//读取XGPON RSSI ADC
int XGSPON_OLT_SET_10G_RXP_MON(int handle, enum LUT_MODE Mode);										//设置XGPON RSSI模式
int XGSPON_OLT_SET_10G_RXPOW_TABLE(int handle, short *ADC_Array, double *PWR_Array, int CaliNumber);   //设置XGPON RSSI查找表
/***************************************XGPON RSSI************************************/

/***************************************XGPON TXMON************************************/
int XGSPON_OLT_SET_10G_TxMon(int handle, float MON_L, float MON_H, float Unit);  						//设置XGPON TxMon 门限        
int XGSPON_OLT_GET_10G_TxPOWER_ADC(int handle, unsigned short *ADC);  									//读取XGPON TX ADC   
int XGSPON_OLT_SET_10G_TXPOW_CAL(int handle, unsigned short *ADC_Array, float *PWR_Array, float Unit); //写XGPON Tx校准数据      
/***************************************XGPON TXMON************************************/

int XGSPON_OLT_GET_10G_Bias(int handle, float *Bias, float Unit);			//计算XGPON Bias 
int XGSPON_OLT_GET_10G_TxMon(int handle, float *TxMon, float Unit);		//计算XGPON TxMon
int XGSPON_OLT_GET_10G_RxMon(int handle, float *RxMon, float Unit);		//计算XGPON RxMon
/**************************************************XGPON OLT**************************************************/

/***************************************TEMP************************************/
int XGSPON_OLT_SET_TOSA_TEMP_Mode (int handle, enum LUT_MODE Mode);  										//设置TOSA_TEMP模式
int XGSPON_OLT_GET_TOSA_TEMP(int handle, unsigned short* GET_TEMP);   										//读取TOSA_TEMP值    
int XGSPON_OLT_SET_TOSA_TEMP(int handle, unsigned short SET_TEMP);    										//设置TOSA_TEMP值 
int XGSPON_OLT_SET_TOSA_TEMP_Range(int handle, unsigned short SET_TEMP_MAX, unsigned short SET_TEMP_MIN); 	//设置TOSA_TEMP最大最小值	 
/***************************************TEMP************************************/

/***************************************EA************************************/
int XGSPON_OLT_SET_EA_Mode (int handle, enum LUT_MODE Mode);  									//设置EA模式
int XGSPON_OLT_GET_EA(int handle, unsigned short* GET_EA);   									//读取EA值    
int XGSPON_OLT_SET_EA(int handle, unsigned short SET_EA);    									//设置EA值 
int XGSPON_OLT_SET_EA_Range(int handle, unsigned short SET_EA_MAX, unsigned short SET_EA_MIN); 	//设置EA最大最小值	 
/***************************************EA************************************/

/***************************************TEC************************************/
int XGSPON_OLT_SET_TEC_Mode (int handle, enum LUT_MODE Mode);  										//设置TEC模式
int XGSPON_OLT_GET_TEC(int handle, unsigned short* GET_TEC);   										//读取TEC值    
int XGSPON_OLT_SET_TEC(int handle, unsigned short SET_TEC);    										//设置TEC值 
int XGSPON_OLT_SET_TEC_Range(int handle, unsigned short SET_TEC_MAX, unsigned short SET_TEC_MIN); 	//设置TEC最大最小值	 
int XGSPON_OLT_GET_TEC_LUT(int handle, int *Temper, float *Slope, float *Offset);  					//读取TEC LUK 
int XGSPON_OLT_SET_TEC_LUT(int handle, float* DAC, float* Temper);                            		//写TEC查找表  
int XGSPON_OLT_SET_TEC_LUT_High(int handle, float* DAC, float* Temper);                       		//写TEC查找表High 
int XGSPON_OLT_SET_TEC_LUT_Low(int handle, float* DAC, float* Temper);								//写TEC查找表LOW   
/***************************************TEC************************************/


int XGSPON_OLT_Update_BASE(int handle, int tableIndex); 			           //更新表BASE 
int XGSPON_OLT_Update_LUK(int handle, int tableIndex); 			           //更新表LUK

int XGSPON_OLT_SET_BIAS_Unit_Ex(int handle,int unit);	//根据数据配置Bias单位来配置Bias校准系数

/***************************************CASE TEMP************************************/
int XGSPON_OLT_SET_CASE_TEMP_Mode (int handle, enum LUT_MODE Mode);	//设置CASE TEMP模式
int XGSPON_OLT_SET_CASE_TEMP_LUT (int handle, float K1, float B1, float K2, float B2, float S);//设置温度查找表
int XGSPON_OLT_GET_CASE_Temper(int handle, float *Temper, float Unit);		//计算XGSPON OLT Case Temper
/***************************************CASE TEMP************************************/

/***************************************CORE TEMP************************************/
int XGSPON_OLT_GET_CORE_Temper(int handle, float* CoreTemper); 	   //模块内核温度监控
/***************************************CORE TEMP************************************/



/***************************************VCC************************************/
int XGSPON_OLT_Cal_Vcc(int handle, float slope, float offset);          // Cal Vcc
/***************************************VCC************************************/ 

/***************************************CFG************************************/
int XGSPON_OLT_SET_CFG(int handle, unsigned short DAC);
/***************************************CFG************************************/

/***************************************DRIVER************************************/
int XGSPON_OLT_Update_DRIVER(int handle);   			      //更新2010驱动寄存器表
/***************************************DRIVER************************************/

/***************************************APC 驱动模式************************************/
int XGSPON_OLT_SET_APC_DriverMode(int handle, int DAC);                                                     
/***************************************CFG************************************/

float calculate_temperature_8077(INT16S data, float slope, float offset, float unit);
float calculate_voltage_8077(INT16U data, float slope, float offset, float unit);
float calculate_biascurrent_8077(INT16U data, float slope, float offset, float unit); 
float calculate_txpower_8077(INT16U data, float slope, float offset, float unit);
float calculate_rxpower_8077(INT16U data, float slope, float offset, float unit); 

#endif 			
